// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products  Product[] // Vendor can have many products
  orders    Order[]   // Customer can have many orders
  
  @@map("users")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float       // Price per kg
  category    ProductCategory
  imageUrl    String?
  minOrderKg  Float       @default(1) // Minimum order in kg
  maxOrderKg  Float?      // Maximum order in kg (optional)
  isActive    Boolean     @default(true)
  
  // Vendor information
  vendorId    String
  vendor      User        @relation(fields: [vendorId], references: [id])
  vendorName  String      // Cache vendor name for easy display
  
  // Location and delivery
  city        String
  state       String
  
  // Occasions
  occasions   String[]    // ["wedding", "festival", "birthday"]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  orderItems  OrderItem[]
  
  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  customerId    String
  customer      User        @relation(fields: [customerId], references: [id])
  
  totalAmount   Float
  status        OrderStatus @default(PENDING)
  
  // Delivery information
  deliveryAddress String
  deliveryCity    String
  deliveryState   String
  deliveryDate    DateTime?   // Requested delivery date
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  orderItems    OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  quantity  Float   // Quantity in kg
  price     Float   // Price at time of order
  
  @@map("order_items")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum ProductCategory {
  LADDU           // Besan Laddu, Motichoor, etc.
  BARFI           // Kaju Barfi, Coconut Barfi, etc.
  HALWA           // Gajar Halwa, Moong Dal Halwa, etc.
  RASGULLA        // Traditional Bengali sweet
  GULAB_JAMUN     // Classic fried sweet
  SANDESH         // Bengali cottage cheese sweet
  KHEER           // Rice pudding varieties
  JALEBI          // Spiral fried sweet
  BURFI           // Alternative spelling of Barfi
  PEDA            // Milk-based sweet
  KACHORI         // Sweet stuffed pastry
  MISHTI          // General Bengali sweets
  SEASONAL        // Festival-specific sweets
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}