generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  firstName     String?
  lastName      String?
  phone         String?
  role          Role      @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  vendorProfile VendorProfile?
  orders        Order[]
  reviews       Review[]

  @@map("users")
}

model VendorProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  businessName    String
  description     String?
  specialties     String[]
  pickupAddress   String?
  deliveryRadius  Int      @default(25)
  isVerified      Boolean  @default(false)
  rating          Float    @default(0.0)
  totalOrders     Int      @default(0)
  profileImage    String?
  bannerImage     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]
  orders   Order[]
  reviews  Review[]

  @@map("vendor_profiles")
}

model Product {
  id               String    @id @default(cuid())
  vendorId         String
  name             String
  description      String?
  ingredients      String?
  pricePerPiece    Float?
  pricePerKg       Float?
  minOrderQuantity Int       @default(1)
  unitType         UnitType  @default(PIECE)
  isAvailable      Boolean   @default(true)
  prepTimeHours    Int       @default(24)
  shelfLifeDays    Int       @default(3)
  tags             String[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  vendor     VendorProfile @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id                String        @id @default(cuid())
  customerId        String
  vendorId          String
  orderNumber       String        @unique
  status            OrderStatus   @default(PENDING)
  totalAmount       Float
  platformFee       Float         @default(0)
  eventType         String?
  eventDate         DateTime?
  guestCount        Int?
  deliveryMethod    DeliveryMethod?
  deliveryAddress   String?
  specialInstructions String?
  paymentStatus     PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  customer User          @relation(fields: [customerId], references: [id])
  vendor   VendorProfile @relation(fields: [vendorId], references: [id])
  items    OrderItem[]
  reviews  Review[]

  @@map("orders")
}

model OrderItem {
  id          String @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  specialNotes String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  orderId    String
  customerId String
  vendorId   String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  order    Order         @relation(fields: [orderId], references: [id])
  customer User          @relation(fields: [customerId], references: [id])
  vendor   VendorProfile @relation(fields: [vendorId], references: [id])

  @@map("reviews")
}

enum Role {
  CUSTOMER
  VENDOR
  ADMIN
}

enum UnitType {
  PIECE
  KG
  BOX
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}